// SUPPORTED_PAIRS is used for /tickers/pairs endpoint
// In case of adding new supported pairs:
// 1. Add it in SUPPORTED_PAIRS so it would show in the /market/spot and pair selectors of frontend.
// 2. Add it in PAIRS_MAP as 'RANDOM_4_PLACES_KEY':'PAIR_SYMBOL'. key can be generated by utils.generateRandomSequence(). This is used for memo decoding.
// 3. Add both base and target mixin asset id in SYMBOL_ASSET_ID_MAP by 'ASSET_SYMBOL':'ASSET_ID'. This is used for mapping mixin asset to pair symbol of exchanges.

export const SUPPORTED_PAIRS = {
  binance: [
    'BTC/USDT',
    'ETH/USDT',
    'BNB/USDT',
    'UNI/USDT',
    'CRV/USDT',
    'SOL/USDT',
    'SUI/USDT',
  ],
  bitfinex: ['BTC/USDT', 'ETH/USDT'],
  mexc: ['BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'UNI/USDT'],
  gate: [],
  lbank: [],
  okx: [],
};

// Used for Mixin memo
export const PAIRS_MAP = {
  Z7GC: 'BTC/USDT-ERC20',
  MX5C: 'ETH/USDT-ERC20',
  K8TT: 'BNB/USDT-ERC20',
  Y3YH: 'XRP/USDT-ERC20',
  W4EF: 'ADA/USDT-ERC20',
  GTYF: 'SOL/USDT-ERC20',
  K5M2: 'DOT/USDT-ERC20',
  DHWY: 'DOGE/USDT-ERC20',
  L4JL: 'AVAX/USDT-ERC20',
  RSMN: 'SHIB/USDT-ERC20',
  LM4O: 'LTC/USDT-ERC20',
  HM3F: 'UNI/USDT-ERC20',
  POGO: 'LINK/USDT-ERC20',
  XDWG: 'MATIC/USDT-ERC20',
  FQ10: 'ALGO/USDT-ERC20',
  M5TG: 'TRX/USDT-ERC20',
  XE6B: 'XLM/USDT-ERC20',
  LHSF: 'VET/USDT-ERC20',
  JUP0: 'ICP/USDT-ERC20',
  AYWT: 'FIL/USDT-ERC20',
  Y5IL: 'THETA/USDT-ERC20',
  X2P1: 'XTZ/USDT-ERC20',
  ABWR: 'EOS/USDT-ERC20',
  PXYT: 'AAVE/USDT-ERC20',
  X1YO: 'KSM/USDT-ERC20',
  EHE7: 'NEO/USDT-ERC20',
  YJGX: 'MKR/USDT-ERC20',
  MQQZ: 'CRO/USDT-ERC20',
  WOX4: 'ATOM/USDT-ERC20',
  BVSE: 'COMP/USDT-ERC20',
};

export const PAIRS_MAP_REVERSED: { [key: string]: string } = Object.entries(
  PAIRS_MAP,
).reduce((acc, [key, value]) => ({ ...acc, [value]: key }), {});

export const SYMBOL_ASSET_ID_MAP = {
  BTC: 'c6d0c728-2624-429b-8e0d-d9d19b6592fa',
  ETH: '43d61dcd-e413-450d-80b8-101d5e903357',
  BNB: '17f78d7c-ed96-40ff-980c-5dc62fecbc85',
  XRP: '23dfb5a5-5d7b-48b6-905f-3970e3176e27',
  SOL: '64692c23-8971-4cf4-84a7-4dd1271dd887',
  DOT: '54c61a72-b982-4034-a556-0d99e3c21e39',
  DOGE: '6770a1e5-6086-44d5-b60f-545f9d9e8ffd',
  AVAX: 'cbc77539-0a20-4666-8c8a-4ded62b36f0a',
  SHIB: 'dcde18b9-f015-326f-b8b1-5b820a060e44',
  LTC: '76c802a2-7c88-447f-a93e-c29c9e5dd9c8',
  UNI: 'a31e847e-ca87-3162-b4d1-322bc552e831',
  LINK: 'f6f1c01c-8489-3346-b127-dc0dc09b9ce7',
  MATIC: '9682b8e9-6f16-3729-b07b-bc3bc56e5d79',
  ALGO: '706b6f84-3333-4e55-8e89-275e71ce9803',
  TRX: '25dabac5-056a-48ff-b9f9-f67395dc407c',
  XLM: '56e63c06-b506-4ec5-885a-4a5ac17b83c1',
  FIL: '08285081-e1d8-4be6-9edc-e203afa932da',
  XTZ: '5649ca42-eb5f-4c0e-ae28-d9a4e77eded3',
  EOS: '6cfe566e-4aad-470b-8c9a-2fd35b49c68d',
  AAVE: 'b80af5fd-85b8-3f00-b7c2-68d2c9f1137a',
  KSM: '9d29e4f6-d67c-4c4b-9525-604b04afbe9f',
  MKR: 'efdbb270-b484-38e3-8ecc-31440af1b605',
  CRO: '35460057-16ff-3f61-a438-d98be98a30ad',
  ATOM: '7397e9f1-4e42-4dc8-8a3b-171daaadd436',
  'USDT-ERC20': '4d8c508b-91c5-375b-92b0-ee702ed2dac5',
};

export const ASSET_ID_SYMBOL_MAP: { [key: string]: string } = Object.entries(
  SYMBOL_ASSET_ID_MAP,
).reduce((acc, [key, value]) => ({ ...acc, [value]: key }), {});
