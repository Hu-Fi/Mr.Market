import { decodeSpotMemo } from './memo';
import {
  TARDING_TYPE_MAP,
  SPOT_ORDER_TYPE_MAP,
  SPOT_EXCHANGE_MAP,
} from 'src/common/constants/memo';

describe('decodeSpotMemo', () => {
  it('should decode a valid spot memo correctly', () => {
    const validMemo = 'U1A6TEI6MDE6WjdHQzo5OTk5Ljk5OTk6MTIzNDU2Nzg';
    const memo = Buffer.from(validMemo, 'base64').toString('utf-8');
    const expectedResult = {
      tradingType: TARDING_TYPE_MAP['SP'],
      spotOrderType: SPOT_ORDER_TYPE_MAP['LB'],
      exchangeName: SPOT_EXCHANGE_MAP['01'],
      destId: 'Z7GC',
      limitPrice: '9999.9999',
      refId: '12345678',
    };

    const decodedMemo = decodeSpotMemo(memo);
    expect(decodedMemo).toEqual(expectedResult);
  });

  it('should handle memo generated by frontend', () => {
    const validMemo = 'U1A6TUI6MDQ6WjdHQzo2OTYyNy45Og';
    const memo = Buffer.from(validMemo, 'base64').toString('utf-8');
    const expectedResult = {
      tradingType: TARDING_TYPE_MAP['SP'],
      spotOrderType: SPOT_ORDER_TYPE_MAP['MB'],
      exchangeName: SPOT_EXCHANGE_MAP['04'],
      destId: 'Z7GC',
      limitPrice: '69627.9',
      refId: '',
    };
    const decodedMemo = decodeSpotMemo(memo);
    expect(decodedMemo).toEqual(expectedResult);
  });

  it('should handle a memo without limit price and refId', () => {
    const memoWithoutLimitPriceAndRefId = 'U1A6TUI6MDI6TU1NTQ==';
    const memo = Buffer.from(memoWithoutLimitPriceAndRefId, 'base64').toString(
      'utf-8',
    );
    const expectedResult = {
      tradingType: TARDING_TYPE_MAP['SP'],
      spotOrderType: SPOT_ORDER_TYPE_MAP['MB'],
      exchangeName: SPOT_EXCHANGE_MAP['02'],
      destId: 'MMMM',
      limitPrice: undefined,
      refId: undefined,
    };

    const decodedMemo = decodeSpotMemo(memo);
    expect(decodedMemo).toEqual(expectedResult);
  });

  it('should throw an error for an invalid base64 encoded memo', () => {
    const invalidMemo = 'invalidBase64Memo';
    expect(decodeSpotMemo(invalidMemo)).toStrictEqual({
      destId: undefined,
      exchangeName: undefined,
      limitPrice: undefined,
      refId: undefined,
      spotOrderType: undefined,
      tradingType: undefined,
    });
  });
});
