import {
  decodeArbitrageMemo,
  decodeMarketMakingMemo,
  decodeSpotMemo,
} from './memo';
import {
  TARDING_TYPE_MAP,
  SPOT_ORDER_TYPE_MAP,
  SPOT_EXCHANGE_MAP,
} from 'src/common/constants/memo';

describe('decodeSpotMemo', () => {
  it('should decode a valid spot memo correctly', () => {
    const validMemo = 'U1A6TEI6MDE6WjdHQzo1MDAwMDo';
    const memo = Buffer.from(validMemo, 'base64').toString('utf-8');
    const expectedResult = {
      tradingType: TARDING_TYPE_MAP['SP'],
      spotOrderType: SPOT_ORDER_TYPE_MAP['LB'],
      exchangeName: SPOT_EXCHANGE_MAP['01'],
      destId: 'Z7GC',
      limitPrice: '50000',
      refId: '',
    };

    const decodedMemo = decodeSpotMemo(memo);
    expect(decodedMemo).toEqual(expectedResult);
  });

  it('should handle memo generated by frontend', () => {
    const validMemo = 'U1A6TUI6MDQ6WjdHQzo2OTYyNy45Og';
    const memo = Buffer.from(validMemo, 'base64').toString('utf-8');
    const expectedResult = {
      tradingType: TARDING_TYPE_MAP['SP'],
      spotOrderType: SPOT_ORDER_TYPE_MAP['MB'],
      exchangeName: SPOT_EXCHANGE_MAP['04'],
      destId: 'Z7GC',
      limitPrice: '69627.9',
      refId: '',
    };
    const decodedMemo = decodeSpotMemo(memo);
    expect(decodedMemo).toEqual(expectedResult);
  });

  it('should handle a memo without limit price and refId', () => {
    const memoWithoutLimitPriceAndRefId = 'U1A6TUI6MDI6TU1NTQ==';
    const memo = Buffer.from(memoWithoutLimitPriceAndRefId, 'base64').toString(
      'utf-8',
    );
    const expectedResult = {
      tradingType: TARDING_TYPE_MAP['SP'],
      spotOrderType: SPOT_ORDER_TYPE_MAP['MB'],
      exchangeName: SPOT_EXCHANGE_MAP['02'],
      destId: 'MMMM',
      limitPrice: undefined,
      refId: undefined,
    };

    const decodedMemo = decodeSpotMemo(memo);
    expect(decodedMemo).toEqual(expectedResult);
  });

  it('should throw an error for an invalid base64 encoded memo', () => {
    const invalidMemo = 'invalidBase64Memo';
    expect(decodeSpotMemo(invalidMemo)).toStrictEqual({
      destId: undefined,
      exchangeName: undefined,
      limitPrice: undefined,
      refId: undefined,
      spotOrderType: undefined,
      tradingType: undefined,
    });
  });
});

describe('decodeArbitrageMemo', () => {
  it('should decode a valid arbitrage memo correctly', () => {
    const decodedMemo = 'AR:CR:01:02:Z7GC:b0177350-ae29-43ec-a26e-d46f821e416e';
    const result = decodeArbitrageMemo(decodedMemo);
    expect(result).toEqual({
      tradingType: 'Arbitrage',
      action: 'create',
      exchangeAName: 'binance',
      exchangeBName: 'bitfinex',
      symbol: 'BTC/USDT-ERC20',
      traceId: 'b0177350-ae29-43ec-a26e-d46f821e416e',
    });
  });

  it('should return null for empty input', () => {
    const result = decodeArbitrageMemo('');
    expect(result).toBeNull();
  });

  it('should return null for invalid memo format', () => {
    const decodedMemo = 'AR:CR:01'; // Missing parts
    const result = decodeArbitrageMemo(decodedMemo);
    expect(result).toBeNull();
  });

  it('should return null when destId does not map to a symbol', () => {
    const decodedMemo = 'AR:CR:01:02:99';
    const result = decodeArbitrageMemo(decodedMemo);
    expect(result).toBeNull();
  });
});

describe('decodeMarketMakingMemo', () => {
  it('should decode a valid market making memo correctly', () => {
    const decodedMemo = 'MM:DE:04:MX5C:b0177350-ae29-43ec-a26e-d46f821e416e';
    const result = decodeMarketMakingMemo(decodedMemo);
    expect(result).toEqual({
      tradingType: 'Market Making',
      action: 'deposit',
      exchangeName: 'okx',
      symbol: 'ETH/USDT-ERC20',
      traceId: 'b0177350-ae29-43ec-a26e-d46f821e416e',
    });
  });

  it('should return null for empty input', () => {
    const result = decodeMarketMakingMemo('');
    expect(result).toBeNull();
  });

  it('should return null for invalid memo format', () => {
    const decodedMemo = 'MM:CR:ETHUSD'; // Incorrect format
    expect(decodeMarketMakingMemo(decodedMemo)).toBeNull();
  });

  it('should return null when destId does not map to a symbol', () => {
    const decodedMemo = 'MM:CR:03:99'; // '99' does not map to any symbol
    const result = decodeMarketMakingMemo(decodedMemo);
    expect(result).toBeNull();
  });
});
